Q: How might using version control make you more confident to make changes that could break something?

A: Being able to revert back to a previous version at any point using git checkout (commit_id)
   However its best to always maintain the most recent commit id, as checking out to a previous version will result in loss of logs

   Explore significant changes in code base
   Withouct VCS, - you make very small iterative changes – making program incrementally better
   With VCS, you have a large space of things to try, which can help make you a better programmer, 
   by letting you explore deep architecture concepts.
      
Q: How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
A: For bug fixing : looking at commit history might help quickly identify when a bug got introduced and what change needs to be reverted. 

Q: What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?
A: With manual commits, You can add a message explaining the change. And you can only commit when a logical change or functionality is 
   complete. With auto-commits, changes can get saved too soon, when the functionality is not yet ready, and becomes avaialble for use
   to other team members which can lead to compilation errors for them and slow down the performance of team.

Q: How can you use the commands git log and git diff to view the history of files?
A: git log will display all previous commits to the repo, with the commit IDs, messages and timestamps.
   git diff will only display difference between two commits specified by commit IDs.

Q: How might using version control make you more confident to make changes that could break something?
A: Since you have entire history of changes to the file, you can revert back to a specific safe state and keep working from there.
   Possible to make really big logical changes because of this. You can also go back and forth between commits by looking at 
   commit history and using git checkout. You can explore and make small changes without breaking the functionality.

Q: Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, 
like Google Docs, treat each file separately?
A: Because multiple files are inter-connected. One file change affects the other and so on.
   With Google Docs , each file is a document by itself, there are no links or references to other files.



NOTES :

Repository : collection of files that are tracked by Git as a cohesive unit
git commit : snapshot of every file in the repository at the time the commit was made.
git log -- stat : gives statistics about which files have changed in each commit, starting from the latest.
git clone repository-url : copy an entire repository from one computer to another (Internet access required)
git config --global color.ui auto : to get different colors for insertions, deletions, etc. (Else you will just see black and white diffs)
git diff OLD_CommitID New_CommitID : this is similar to windows command "diff -u first-file second-file"
git checkout commit_ID : temporarily changing files back to the way they were at the stage of any commit. sort of like restoring a 
previous version. Helpful to figure out which older commit introcued a bug.
git checkout -b new_branch_name

Git Errors and Warnings:

Should not be doing an octopus : Octopus is a strategy Git uses to combine many different versions of code together. 
This message can appear if you try to use this strategy in an inappropriate situation.

You are in 'detached HEAD' state : HEAD is what Git calls the commit you are currently on. 
You can “detach” the HEAD by switching to a previous commit, Despite what it sounds like, it’s actually not a bad 
thing to detach the HEAD. Git just warns you so that you’ll realize you’re doing it.

 Git doesn't allow you to save a new commit if no files have been updated
