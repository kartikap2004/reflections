Q: When would you want to use a remote repository rather than keeping all your work local?
A: When working on a team project with several other developers, so that all team members have access to my latest code changes.
   Also, in case of using different machines, eg : I can work from the office and from my laptop at home, but I want all my changes
   to be updated in one central location.

Q: Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
A: When working on a big project or feature that may require 1000s of lines of code,
   we want to make sure there is a working logical piece of code change/functionality that
   is ready to be checked into the remote repository. Keeping local repository in sync with remote
   might also bring in changes from other users , possibly functions being changed by a different developer, 
   that might cause compilation to fail for me. Whereas with manual pull, I can make sure that I
   have a working piece of code, then update from remote and then compile in the end & resolve any errors if required.
  
Q: Describe the differences between forks, clones, and branches.  When would you use one instead of another?
A: Forking will be used when you need to work off someone else's changes., that is to make someone else's repository available
   under your account for modifications.
   Cloning will be used when I need to make a copy of my own repository either locally or from GitHub to my local machine.
   Branches are created within a single repository, local or remote. Branching will be used when making changes that need not go 
   into the master branch, like when working in increments on a big feature.

Q: What is the benefit of having a copy of the last known state of the remote stored locally?
A: 

Q: How would you collaborate without using Git or GitHub?  What would be easier, and what would be harder?
A: 

Q: When would you want to make changes in a separate branch rather than directly in master?  
   What benefits does each approach have?
A: 



NOTES
=======================
Forking a repository = making a copy/clone of somebody else's repository directly on the GitHub server - eliminates the
need to pull down the code to your local machine
forking an existing repository can make it available under your account
Just like cloning - only difference is that GitHub makes this clone for you on their own machines

Branches dont need to involve multiple repositories, they are created on a single repository. but they need to have non-linear histories. 
Cloning a repo from GitHub to GitHub = fork
When you clone a repo, Git automatically sets up a remote pointing to the repo you cloned from. So there is no need to add remote repo.

Add Collaborator option on GitHub : to allow anyone to push to your repository

Forking is a GitHub construct only.

After cloning a remote repository to local, if you start making local changes, you cannot use 
'git commit' for these local changes unless you explicilty set these files for tracking using "git add" - IT IS IMPORTANT 
to add files to the staging area before using "commit" command.

git pull = git fetch, followed by git merge

git log origin/master
remote-tracking branch 'origin/master'









